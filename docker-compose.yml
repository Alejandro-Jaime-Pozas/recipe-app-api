# version of python to be used in docker for maintainability
version: "3.9"

# services - docker compose files usually include 1 or more services to be used; these services should be equivalent to some form of online server (a database, django app, frontend app, etc)
# app is the name of our service. this is the service that will run the docker file
# build > context specifies that we want to build the Dockerfile that's inside the curr directory
# args: - DEV=true sets an argument in the build folder w k,v = DEV,true
# ports connects port 8000 from our local machine to port 8000 in docker cointainer. this is how can access network to connect to docker server
# volumes are a way to map our directories in local to the docker container so they're located at same level within their contexts; ie if you create filed in one place, should update in the other
# command is the cmd used to run teh service in docker container
services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - "8000:8000"
    # volumes maps the current ./app in local directory to the cotainer's equivalent /app so everything is synced
    # static data for dev is linked to /vol/web in container system
    volumes:
      - ./app:/app
      - dev-static-data:/vol/web
    # with command you can input multiple commands in multiple lines
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    # matching values here from the 'db' service below's environment
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
    # this tells docker-compose that this django app depends on the db service, so if db doesn't work, django app too
    depends_on:
      - db

  # db is the name of the service and the image used to build that service
  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    # THESE below are environment variables that should be included in configuration for our database within the django app
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

# volumes allow databases to persist data if needed and other benefits, instead of creating, deleting dbs
volumes:
  # name of volume below indicates name that will be appended to app's volume name in docker
  dev-db-data:
  dev-static-data: